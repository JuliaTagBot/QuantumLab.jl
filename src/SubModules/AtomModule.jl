module AtomModule
export Atom, Element
import Base.==

using ..BaseModule

atomicNumbers = Dict{String,Int}(
  "H" => 	1,
  "He" => 	2,
  "Li" => 	3,
  "Be" =>	4,
  "B" =>	5,
  "C" =>	6,
  "N" =>	7,
  "O" =>	8,
  "F" =>	9,
  "Ne" =>	10,
  "Na" =>	11,
  "Mg" =>	12,
  "Al" =>	13,
  "Si" =>	14,
  "P" =>	15,
  "S" =>	16,
  "Cl" =>	17,
  "Ar" =>	18,
  "K" =>	19,
  "Ca" =>	20,
  "Sc" =>	21,
  "Ti" =>	22,
  "V" =>	23,
  "Cr" =>	24,
  "Mn" =>	25,
  "Fe" =>	26,
  "Co" =>	27,
  "Ni" =>	28,
  "Cu" =>	29,
  "Zn" =>	30,
  "Ga" =>	31,
  "Ge" =>	32,
  "As" =>	33,
  "Se" =>	34,
  "Br" =>	35,
  "Kr" =>	36,
  "Rb" =>	37,
  "Sr" =>	38,
  "Y" =>	39,
  "Zr" =>	40,
  "Nb" =>	41,
  "Mo" =>	42,
  "Tc" =>	43,
  "Ru" =>	44,
  "Rh" =>	45,
  "Pd" =>	46,
  "Ag" =>	47,
  "Cd" =>	48,
  "In" =>	49,
  "Sn" =>	50,
  "Sb" =>	51,
  "Te" =>	52,
  "I" =>	53,
  "Xe" =>	54,
  "Cs" =>	55,
  "Ba" =>	56,
  "La" =>	57,
  "Ce" =>	58,
  "Pr" =>	59,
  "Nd" =>	60,
  "Pm" =>	61,
  "Sm" =>	62,
  "Eu" =>	63,
  "Gd" =>	64,
  "Tb" =>	65,
  "Dy" =>	66,
  "Ho" =>	67,
  "Er" =>	68,
  "Tm" =>	69,
  "Yb" =>	70,
  "Lu" =>	71,
  "Hf" =>	72,
  "Ta" =>	73,
  "W" =>	74,
  "Re" =>	75,
  "Os" =>	76,
  "Ir" =>	77,
  "Pt" =>	78,
  "Au" =>	79,
  "Hg" =>	80,
  "Tl" =>	81,
  "Pb" =>	82,
  "Bi" =>	83,
  "Po" =>	84,
  "At" =>	85,
  "Rn" =>	86,
  "Fr" =>	87,
  "Ra" =>	88,
  "Ac" =>	89,
  "Th" =>	90,
  "Pa" =>	91,
  "U" =>	92,
  "Np" =>	93,
  "Pu" =>	94,
  "Am" =>	95,
  "Cm" =>	96,
  "Bk" =>	97,
  "Cf" =>	98,
  "Es" =>	99,
  "Fm" =>	100,
  "Md" =>	101,
  "No" =>	102,
  "Lr" =>	103,
  "Rf" =>	104,
  "Db" =>	105,
  "Sg" =>	106,
  "Bh" =>	107,
  "Hs" =>	108,
  "Mt" =>	109,
  "Ds" =>	110,
  "Rg" =>	111,
  "Cp" =>	112,
  "Uut" =>	113,
  "Uuq" =>	114,
  "Uup" =>	115,
  "Uuh" =>	116,
  "Uus" =>	117,
  "Uuo" =>	118
)

atomicWeight = Dict{Int64,Float64}(# according to IUPAC Pure Appl. Chem. 2016, 88(12), 1203-1224
  1  => 1.008,
  2  => 4.002,
  3  => 6.94,
  4  => 9.012,
  5  => 10.81,
  6  => 12.011,
  7  => 14.007,
  8  => 15.999,
  9  => 18.998,
  10 => 20.1797,
  11 => 22.989,
  12 => 24.305,
  13 => 26.981,
  14 => 28.085,
  15 => 30.973,
  16 => 32.06,
  17 => 35.45,
  18 => 39.948,
  19 => 39.0983,
  20 => 40.078,
  21 => 44.955,
  22 => 47.867,
  23 => 50.9415,
  24 => 51.9961,
  25 => 54.938,
  26 => 55.845,
  27 => 58.933,
  28 => 58.6934,
  29 => 63.546,
  30 => 65.38,
  31 => 69.723,
  32 => 72.630,
  33 => 74.921,
  34 => 78.971,
  35 => 79.904,
  36 => 83.798,
  37 => 85.4678,
  38 => 87.62,
  39 => 88.905,
  40 => 91.224,
  41 => 92.906,
  42 => 95.95,
  44 => 101.07,
  45 => 102.905,
  46 => 106.42,
  47 => 107.8682,
  48 => 112.414,
  49 => 114.818,
  50 => 118.710,
  51 => 121.760,
  52 => 127.60,
  53 => 126.904,
  54 => 131.293,
  55 => 132.905,
  56 => 137.327,
  57 => 138.905,
  58 => 140.116,
  59 => 140.907,
  60 => 144.242,
  62 => 150.36,
  63 => 151.964,
  64 => 157.25,
  65 => 158.925,
  66 => 162.500,
  67 => 164.930,
  68 => 167.259,
  69 => 168.934,
  70 => 173.045,
  71 => 174.9668,
  72 => 178.49,
  73 => 180.947,
  74 => 183.84,
  75 => 186.207,
  76 => 190.23,
  77 => 192.217,
  78 => 195.084,
  79 => 196.966,
  80 => 200.592,
  81 => 204.38,
  82 => 207.2,
  83 => 208.980,
  90 => 232.0377,
  91 => 231.035,
  92 => 238.028
)

struct Element
	symbol::String
	atomicNumber::Int

	Element(sym::AbstractString) = new(sym,atomicNumbers[sym])
end

==(el1::Element,el2::Element) = el1.symbol==el2.symbol && el1.atomicNumber==el2.atomicNumber
#isequal(el1::Element,el2::Element) = isequal(el1.symbol,el2.symbol) && isequal(el1.atomicNumber,el2.atomicNumber)

import Base.hash
hash(el::Element) = hash(el.symbol,hash(el.atomicNumber))

mutable struct Atom
	element::Element
	position::Position
end

import ..BaseModule.distance
distance(at1::Atom,at2::Atom) = distance(at1.position,at2.position)

end # module
